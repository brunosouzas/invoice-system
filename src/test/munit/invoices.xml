<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="invoices-suite.xml" />

	<munit:test name="invoices-success-test" doc:id="4117b151-fd4a-475c-a26f-d640d22d0eb3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock readCSV" doc:id="1ac0663f-06f0-4ffc-9456-9045c10f0381" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0e954937-a966-4168-b08d-37c8319dbfb2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://invoicessuccesstest/mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy payload" doc:id="6d6448c9-46f4-4606-b263-0d3574a75287" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ed96e59d-9d4c-4cad-9797-f8cc89726d68" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="32a4a230-2198-471c-9023-bf573ea1aff2" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import invoicessuccesstest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="9d35adae-acde-46ba-841d-b3f1d7ac4e9e" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import invoicessuccesstest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="a177bbaa-55ee-4e54-909f-4fdd8d45a1cb" >
				<munit:payload value="#[readUrl('classpath://invoicessuccesstest/set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://invoicessuccesstest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="invoiceDateInit" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://invoicessuccesstest/set-event_variable_1.dwl')]" />
					<munit:variable key="invoiceDateEnd" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_2.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="offset" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_3.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="customerId" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_4.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="contractId" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_5.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="limit" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_6.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="invoiceNumber" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_7.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="maskedRequestPath" value="#[output application/java --- readUrl('classpath://invoicessuccesstest/set-event_variable_8.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to invoices::Flow" doc:id="073361ae-c521-48ee-a847-4d0ac8601837" name="invoices::Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6065f16e-063b-4e8e-86bb-134c7494497b" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import invoicessuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify payload" doc:id="381e57d1-448d-4f59-aa3a-25d0c6402bf7" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ed96e59d-9d4c-4cad-9797-f8cc89726d68" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>
